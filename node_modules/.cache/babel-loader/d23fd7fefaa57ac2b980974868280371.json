{"ast":null,"code":"var _jsxFileName = \"/home/andrey/Projects/test/src/components/FormField/FormField.js\";\nimport React from 'react';\nimport { Field } from 'react-final-form'; // Class names list:\n// input__wrap\n// input__label (not required)\n// input\n// input--error\n// input__error-wrap\n// input__error-text\n\nvar FormField = function FormField(props) {\n  var _props$className = props.className,\n      className = _props$className === void 0 ? 'input' : _props$className,\n      serverErrors = props.serverErrors,\n      setServerErrors = props.setServerErrors,\n      name = props.name,\n      _props$placeholderTex = props.placeholderText,\n      placeholderText = _props$placeholderTex === void 0 ? '' : _props$placeholderTex,\n      _props$labelText = props.labelText,\n      labelText = _props$labelText === void 0 ? '' : _props$labelText,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      _props$isReadOnly = props.isReadOnly,\n      isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n      _props$isShowLabel = props.isShowLabel,\n      isShowLabel = _props$isShowLabel === void 0 ? false : _props$isShowLabel;\n\n  var hideServerErrorOnChange = function hideServerErrorOnChange(e, input) {\n    input.onChange(e);\n    serverErrors[name] && setServerErrors(name, undefined);\n  };\n\n  var isErrorExist = function isErrorExist(meta) {\n    if (meta.error && meta.touched && !meta.active) {\n      // Validation Error\n      return true;\n    } else if (!meta.error && serverErrors[name]) {\n      // Server Error\n      return true;\n    }\n\n    return false;\n  };\n\n  var getErrorText = function getErrorText(meta) {\n    if (meta.error && meta.touched && !meta.active) {\n      // Validation Error\n      return meta.error;\n    } else if (serverErrors[name]) {\n      // Server Error\n      var serverError = serverErrors[name];\n      return serverError[0];\n    }\n\n    return '';\n  };\n\n  return React.createElement(Field, {\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, function (_ref) {\n    var input = _ref.input,\n        meta = _ref.meta;\n    return React.createElement(\"div\", {\n      className: className + '__wrap',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, !!isShowLabel && React.createElement(\"label\", {\n      className: className + '__label',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, labelText), React.createElement(\"input\", Object.assign({}, input, {\n      readOnly: isReadOnly,\n      placeholder: placeholderText,\n      className: className + (isErrorExist(meta) ? \" \".concat(className, \"--error\") : ''),\n      autoComplete: \"off\",\n      onChange: function onChange(e) {\n        return hideServerErrorOnChange(e, input);\n      },\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), isErrorExist(meta) && React.createElement(\"div\", {\n      className: className + '__error-wrap',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: className + '__error-text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, getErrorText(meta))));\n  });\n};\n\nexport default FormField;","map":{"version":3,"sources":["/home/andrey/Projects/test/src/components/FormField/FormField.js"],"names":["React","Field","FormField","props","className","serverErrors","setServerErrors","name","placeholderText","labelText","type","isReadOnly","isShowLabel","hideServerErrorOnChange","e","input","onChange","undefined","isErrorExist","meta","error","touched","active","getErrorText","serverError"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA,yBAWvBA,KAXuB,CAEzBC,SAFyB;AAAA,MAEzBA,SAFyB,iCAEb,OAFa;AAAA,MAGzBC,YAHyB,GAWvBF,KAXuB,CAGzBE,YAHyB;AAAA,MAIzBC,eAJyB,GAWvBH,KAXuB,CAIzBG,eAJyB;AAAA,MAKzBC,IALyB,GAWvBJ,KAXuB,CAKzBI,IALyB;AAAA,8BAWvBJ,KAXuB,CAMzBK,eANyB;AAAA,MAMzBA,eANyB,sCAMP,EANO;AAAA,yBAWvBL,KAXuB,CAOzBM,SAPyB;AAAA,MAOzBA,SAPyB,iCAOb,EAPa;AAAA,oBAWvBN,KAXuB,CAQzBO,IARyB;AAAA,MAQzBA,IARyB,4BAQlB,MARkB;AAAA,0BAWvBP,KAXuB,CASzBQ,UATyB;AAAA,MASzBA,UATyB,kCASZ,KATY;AAAA,2BAWvBR,KAXuB,CAUzBS,WAVyB;AAAA,MAUzBA,WAVyB,mCAUX,KAVW;;AAa3B,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,CAAD,EAAIC,KAAJ,EAAc;AAC5CA,IAAAA,KAAK,CAACC,QAAN,CAAeF,CAAf;AAEAT,IAAAA,YAAY,CAACE,IAAD,CAAZ,IAAsBD,eAAe,CAACC,IAAD,EAAOU,SAAP,CAArC;AACD,GAJD;;AAMA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,QAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,OAAnB,IAA8B,CAACF,IAAI,CAACG,MAAxC,EAAgD;AAAE;AAChD,aAAO,IAAP;AACD,KAFD,MAGK,IAAI,CAACH,IAAI,CAACC,KAAN,IAAef,YAAY,CAACE,IAAD,CAA/B,EAAuC;AAAE;AAC5C,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GATD;;AAWA,MAAMgB,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD,EAAU;AAC7B,QAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,OAAnB,IAA8B,CAACF,IAAI,CAACG,MAAxC,EAAgD;AAAE;AAChD,aAAOH,IAAI,CAACC,KAAZ;AACD,KAFD,MAGK,IAAIf,YAAY,CAACE,IAAD,CAAhB,EAAwB;AAAE;AAC7B,UAAMiB,WAAW,GAAGnB,YAAY,CAACE,IAAD,CAAhC;AAEA,aAAOiB,WAAW,CAAC,CAAD,CAAlB;AACD;;AAED,WAAO,EAAP;AACD,GAXD;;AAaA,SACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEjB,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAGQ,KAAH,QAAGA,KAAH;AAAA,QAAUI,IAAV,QAAUA,IAAV;AAAA,WACC;AAAK,MAAA,SAAS,EAAEf,SAAS,GAAG,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC,CAACQ,WAAF,IACC;AAAO,MAAA,SAAS,EAAER,SAAS,GAAG,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGK,SADH,CAFJ,EAOE,+CACMM,KADN;AAEE,MAAA,QAAQ,EAAEJ,UAFZ;AAGE,MAAA,WAAW,EAAEH,eAHf;AAIE,MAAA,SAAS,EAAEJ,SAAS,IAAIc,YAAY,CAACC,IAAD,CAAZ,cAAyBf,SAAzB,eAA8C,EAAlD,CAJtB;AAKE,MAAA,YAAY,EAAC,KALf;AAME,MAAA,QAAQ,EAAE,kBAACU,CAAD;AAAA,eAAOD,uBAAuB,CAACC,CAAD,EAAIC,KAAJ,CAA9B;AAAA,OANZ;AAOE,MAAA,IAAI,EAAEL,IAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF,EAiBGQ,YAAY,CAACC,IAAD,CAAZ,IACC;AAAK,MAAA,SAAS,EAAEf,SAAS,GAAG,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEA,SAAS,GAAG,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CmB,YAAY,CAACJ,IAAD,CAA1D,CADF,CAlBJ,CADD;AAAA,GADH,CADF;AA6BD,CAxED;;AA0EA,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport { Field } from 'react-final-form';\n\n// Class names list:\n// input__wrap\n// input__label (not required)\n// input\n// input--error\n// input__error-wrap\n// input__error-text\n\nconst FormField = (props) => {\n  const {\n    className = 'input',\n    serverErrors,\n    setServerErrors,\n    name,\n    placeholderText = '',\n    labelText = '',\n    type = 'text',\n    isReadOnly = false,\n    isShowLabel = false,\n  } = props;\n\n  const hideServerErrorOnChange = (e, input) => {\n    input.onChange(e);\n\n    serverErrors[name] && setServerErrors(name, undefined);\n  };\n\n  const isErrorExist = (meta) => {\n    if (meta.error && meta.touched && !meta.active) { // Validation Error\n      return true;\n    }\n    else if (!meta.error && serverErrors[name]) { // Server Error\n      return true;\n    }\n\n    return false;\n  }\n\n  const getErrorText = (meta) => {\n    if (meta.error && meta.touched && !meta.active) { // Validation Error\n      return meta.error;\n    }\n    else if (serverErrors[name]) { // Server Error\n      const serverError = serverErrors[name];\n\n      return serverError[0];\n    }\n\n    return '';\n  }\n\n  return (\n    <Field name={name}>\n      {({ input, meta }) => (\n        <div className={className + '__wrap'}>\n          {!!isShowLabel &&\n            <label className={className + '__label'}>\n              {labelText}\n            </label>\n          }\n\n          <input\n            {...input}\n            readOnly={isReadOnly}\n            placeholder={placeholderText}\n            className={className + (isErrorExist(meta) ? ` ${className}--error` : '')}\n            autoComplete='off'\n            onChange={(e) => hideServerErrorOnChange(e, input)}\n            type={type}\n          />\n\n          {isErrorExist(meta) && (\n            <div className={className + '__error-wrap'}>\n              <span className={className + '__error-text'}>{getErrorText(meta)}</span>\n            </div>\n          )}\n        </div>\n      )}\n    </Field>\n  )\n}\n\nexport default FormField;"]},"metadata":{},"sourceType":"module"}