{"ast":null,"code":"import _slicedToArray from \"/home/andrey/Projects/test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/andrey/Projects/test/src/scenes/LoginPage/LoginPage.js\";\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Form } from 'react-final-form';\nimport useDidMount from '../../hooks/useDidMount';\nimport './LoginPage.scss';\nimport Spinner from '../../components/Spinner/Spinner';\nimport FormField from '../../components/FormField/FormField';\n\nvar LoginPage = function LoginPage(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPending = _useState2[0],\n      setPending = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      serverErrors = _useState4[0],\n      setServerErrors = _useState4[1];\n\n  useDidMount(function () {\n    if (localStorage.isLoggedIn) {\n      props.history.push('/');\n    }\n  });\n\n  var onSubmit = function onSubmit(values) {\n    console.log(values);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"login card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Log In To Application\"), React.createElement(Form, {\n    onSubmit: onSubmit,\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validate: validate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, function (_ref) {\n    var handleSubmit = _ref.handleSubmit,\n        valid = _ref.valid;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(FormField, {\n      className: \"input\",\n      serverErrors: serverErrors,\n      name: \"username\",\n      placeholderText: \"Username\",\n      setServerErrors: setServerErrors,\n      isShowLabel: true,\n      labelText: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(FormField, {\n      className: \"input\",\n      serverErrors: serverErrors,\n      name: \"password\",\n      placeholderText: \"Password\",\n      setServerErrors: setServerErrors,\n      isShowLabel: true,\n      labelText: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"login__submit\",\n      disabled: !valid || isPending,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, isPending ? React.createElement(Spinner, {\n      spinnerSize: 30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }) : 'submit'));\n  }));\n};\n\nvar validate = function validate(_ref2) {\n  var username = _ref2.username,\n      password = _ref2.password;\n  var errors = {};\n\n  if (!username || !username.trim().length) {\n    errors.username = 'Enter username';\n  }\n\n  if (!password || !password.trim().length) {\n    errors.password = 'Enter the password';\n  }\n\n  return errors;\n};\n\nexport default withRouter(LoginPage);","map":{"version":3,"sources":["/home/andrey/Projects/test/src/scenes/LoginPage/LoginPage.js"],"names":["React","useState","withRouter","Form","useDidMount","Spinner","FormField","LoginPage","props","isPending","setPending","serverErrors","setServerErrors","localStorage","isLoggedIn","history","push","onSubmit","values","console","log","username","password","validate","handleSubmit","valid","errors","trim","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Form } from 'react-final-form';\n\nimport useDidMount from '../../hooks/useDidMount';\n\nimport './LoginPage.scss';\nimport Spinner from '../../components/Spinner/Spinner';\nimport FormField from '../../components/FormField/FormField';\n\n\n\nconst LoginPage = (props) => {\n  const [isPending, setPending] = useState(false);\n\n  const [serverErrors, setServerErrors] = useState({});\n\n  useDidMount(() => {\n    if (localStorage.isLoggedIn) {\n      props.history.push('/');\n    }\n  });\n\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n\n  return (\n    <div className=\"login card\">\n      <h1>Log In To Application</h1>\n      <Form\n        onSubmit={onSubmit}\n        initialValues={{\n          username: '',\n          password: '',\n        }}\n        validate={validate}\n      >\n        {({ handleSubmit, valid }) => (\n          <form onSubmit={handleSubmit}>\n            <FormField\n              className='input'\n              serverErrors={serverErrors}\n              name='username'\n              placeholderText='Username'\n              setServerErrors={setServerErrors}\n              isShowLabel\n              labelText='Username'\n            />\n\n            <FormField\n              className='input'\n              serverErrors={serverErrors}\n              name='password'\n              placeholderText='Password'\n              setServerErrors={setServerErrors}\n              isShowLabel\n              labelText='Password'\n            />\n\n            <button\n              className='login__submit'\n              disabled={!valid || isPending}\n            >\n              {isPending\n                ? (\n                  <Spinner spinnerSize={30} />\n                )\n                : 'submit'\n              }\n            </button>\n          </form>\n        )}\n      </Form>\n    </div>\n  )\n}\n\nconst validate = ({ username, password }) => {\n  const errors = {};\n\n  if (!username || !username.trim().length) {\n    errors.username = 'Enter username';\n  }\n  if (!password || !password.trim().length) {\n    errors.password = 'Enter the password';\n  }\n  return errors;\n};\n\nexport default withRouter(LoginPage);"]},"metadata":{},"sourceType":"module"}